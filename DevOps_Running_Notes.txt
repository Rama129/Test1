OM

devopstraineronline@gmail.com

25/March
DevOps
-It helps in working Development and Operations hand in hand to make both the requirements meet and agility & stability happens 

-Agile is successful only till Dev part not to the Ops team
-DevOps helps in 
 CD CT CI CDeplpyment CMonitoring

DevOps is a methodology 
It is a cultural change

DevOps Life Cycle 
 Planning-Coding-Building(Compiling+Packaging)-Testing-Release-Deploy-Operate-Monitor 

Version Control/Source Code Management
GIT-Developers put their code to GIT 
Jenkins-Create the jobs and manages the job to manage the pipe line 
Container is a package where we can deploy the code
Containers are very light weight
Easy to create the containers
Docker is useful to create containers
Huge number of containers are managed by Kubernetes

26/March
Version Control System:
Centralized VCS--SVN, 
Distributed VCS--
 Here we have Remote repository and Local Repository 
 
In Local 
  working directory, Staging area and localrepo
IN Remote repository  
  remote repo

Github runs on browser 
.gitignore
git log

27/March
Stash
-Moving the changes to temporary shell 

28/March
Jenkins
CD-CT-CDep is referred as CI in DevOps
Jenkins is a CI tool
JOB-create job and schedule and configure/edit
Metrics based Authorisations activity-Adding users in Jenkins
  Job based permissions to users
Audit Trial Plugin to view the access log in 
Poll SCM

29/March
Maven
 pom.xml file
Pollscm


04/Apr/2019
Docar Swam
Puppet-Configuration Management Tool
  Master & Slave
  Facts-catalog- 
  Manifest File

05/04/2019
  Puppet-Configuration
 
  
09/Apr/2019
Ansible
VCS Repo module
GIT module
setup module
Adhoc Commands
Playbook
-Roles in Ansible
 Reusable, modular an better performance
 Role is a directory 

 
11/Apr/2017
Labels, Deployment Object, 
Rolling Updates- Blue Green Deployment model -helps in 0% downtime




Branching
 It allows parlor development
 
https://drive.google.com/drive/folders/1L2-eeeRBY5YTRIgvvsPD2LsLV-UqpU8o?usp=sharing

16/Apr/2019
Nagios



==========================================================================================================
==========================================================================================================

Practice Notes
Day1(27/March):
VC is a system that documents the changes to a file or to a folder or to a specific repository.
It tracks changes with log events.
-CVC is useful when delaing with multiple people. It maintains the central repository where all versions are kept
issue with this is in case if Central server is down, then all the users are impacted
-DVC, this has good feature like 
  User has local file to update and then push into the Central server. If Central Server dies, user still can update in Local server.
-GIT is a most popular version control tool
-Working Directory, Staging Area, Local repository and pushes the file to Remote repository
-Remote Repository is the Server where all the final changes are pushed 
-Clone command creates a copy of the existing file inside the Local repository
-Add command adds the file from Working Directory to Staging area and commit command adds that file to Local repository
-Push command pushes all the files from Local repository to Remote Repository
-Fetch command fetches the files from Remote server to Local repository
-

Day2(28/March)
-git rm --cached filename 
 It removes the file only from git folder not from the local repository
-git ls-files 
 to see whether the file is removed from working directory or not 

Day3 (10/Apr)
  Working Directory-Staging area-Localrepo from there Remote Repo
  yum install git -- is the command to install git 
  git init  -- initialising the git to track that specific folder
  git ls-files --To check the tracked files 
  git add . -- for multiple files
  git commit -a -m "Multiple files changes commited to Local Repo" 
  git rm --cached filename --To remove only from tracking
  git .gitignore  --need to mention the files name in this .gitignore to stop tracking files
  git log --oneline  --helps to see log message in oneline
  git revert logid --To revert the previous action by using the log id
  git reset --hard logid   --It resets the log ID as the top most change and removes all top comments
  
Branching Concept:
   git checkout -b newbranch  --To create a new branch
   git branch  -- Shows the present branch
   git checckout branchname  --To switch between the branch names
   git merge source master  --To merge the changes from source to target
      
Day4 (11/Apr)
  Stash --Moving your work in progress to temporary shell is called as Stash
  Stash and UnStash
  git stash list
    
Day5 (14/1pr)
  git stash apply <stash number>
  git stash pop --Removes all stash existing
  git stash drop <stash number>
 
Day 6 (22/Apr)
(Recording3 ) 
Rebase -- Changing the base from one base to the other base. It creates a clean log history. Projects are better organized.

  
  

  




Questions:

1) Diff b/w git commit and git commit -m "message"
2) Why a file is staged and unstaged again ?


Revise
- .gitignore

Questiong to tech Team
1) My .gitignore is not working 
2) Merging concept is not understandable
3) Stash and unstash is nto working 


Done:
Recording done till Recording 2
	

